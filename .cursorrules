* Only modify code directly relevant to the specific request. Avoid changing unrelated functionality.
* Break problems into smaller steps. Think through each step separately before implementing.
* Always provide a complete PLAN with REASONING based on evidence from code and logs before making changes.
* Explain your OBSERVATIONS clearly, then provide REASONING to identify the exact issue. 
* Add console logs when needed to gather more information.
* Use the tools that the framework provides. If there is a native way to do something in the framework, do it that way
* Scan the whole project to better understand structure
* Follow the same dark UI-style
* Don't break the code that is used in multiple modules
* Dont restart the server yourself, let the user do it
* Test everything thoroughly and think of edge cases
* Templates should always have unique names
* Never finish until you tested your code and can verify its working
* Use PowerShell, we are on Windows
* We have sqlite3 installed, so use that for the database
* We have Ollama installed, so use that for the LLM
* Remove all temporary code at the end, make sure the app is functional
* Never commit to git yourself until I ask explicitly
* Use our extract_api_docs that uses daipendency to extract narrative and API documentation from a library and output it in an LLM-friendly format
* Use cargo fix before applying your own fixes
* Dont use && in the terminal, use ; to run multiple commands
* Always run `cargo check` before making changes to see existing compiler warnings/errors
* Use `cargo fix` to automatically fix lints before manual changes
* Pay attention to compiler suggestions for trait implementations and lifetime annotations
* Respect Rust's ownership model - avoid suggesting solutions that violate borrowing rules
* When suggesting Arc/Mutex/RefCell, explain the reasoning for shared ownership
* Prefer stack allocation and references over heap allocation where possible
* Always specify lifetime parameters when suggesting generic code
* Use Result<T, E> for fallible operations instead of panics
* Implement proper error types using thiserror or anyhow when appropriate
* Add context to errors using .context() or .with_context()
* Add unit tests for new functionality using #[test] attribute
* Include doc tests in documentation comments (///) for API examples
* Follow Rust doc comment conventions (///) for public APIs
* Add #[derive(Debug)] to new structs/enums for better error messages
* Check crates.io for version compatibility before suggesting dependencies
* Use cargo tree to identify and resolve dependency conflicts
* Prefer standard library solutions over external crates when possible
* Use feature flags to minimize dependency bloat
* Follow Rust module system conventions (mod.rs or directory/file structure)
* Use pub(crate) instead of pub when possible to maintain encapsulation
* Organize traits and implementations in separate modules when appropriate
* Keep main.rs focused on application setup and configuration
* Suggest #[inline] for small, frequently called functions
* Use iterators instead of for loops where appropriate
* Consider using const generics for compile-time optimizations
* Avoid unnecessary cloning - suggest references where possible
* Mark unsafe blocks clearly and explain safety guarantees
* Use tokio::spawn for async tasks instead of raw threads
* Properly handle async cancellation and cleanup
* Use proper async traits and Future implementations
* Add debug! and trace! macros for logging
* Implement Display and Error traits for custom error types
* Use dbg! macro for temporary debugging
* Suggest cargo expand for macro-heavy code
* Use rustfmt for consistent code formatting
* Run clippy with all lints enabled (cargo clippy -- -W clippy::all)
* Check for MSRV (Minimum Supported Rust Version) compatibility
* Use cargo audit for security vulnerability checks
* Use prepared statements for SQLite queries
* Implement proper connection pooling
* Handle database migrations explicitly
* Use transactions for multi-step operations
* Implement graceful shutdown handlers
* Add proper error recovery for network operations
* Include retry logic for transient failures
* Implement proper cleanup in Drop traits
